"use client"

import type React from "react"
import { useState, useEffect } from "react"
import Column from "./column"
import AddColumnForm from "./addColumnForm"
import styles from "../styles/board.module.scss"
import { AiFillFileAdd } from "react-icons/ai"
import BoardToolbar from "./boardToolBar"
import DebugPanel from "./debugPanel"
import { listApi, cardApi, boardApi } from "../api"
import type { CreateListDto } from "../api"

export type CardType = {
  id: number
  title: string
  description: string
  type: "blocker" | "discussion" | "fyi" | "paused" | "goal"
  count: number
}

export type ColumnType = {
  id: number
  title: string
  cards: CardType[]
}

interface BoardProps {
  boardId: string
}

const Board: React.FC<BoardProps> = ({ boardId }) => {
  const [columns, setColumns] = useState<ColumnType[]>([])
  const [showAddColumn, setShowAddColumn] = useState(false)
  const [, setSelectedCard] = useState<CardType | null>(null)
  const [loading, setLoading] = useState(true)
  const [addingColumn, setAddingColumn] = useState(false)

  useEffect(() => {
    console.log("🔓 Loading board without authentication...")
    loadBoardData()
  }, [boardId])

  // Load board data without authentication
  const loadBoardData = async () => {
    try {
      setLoading(true)
      console.log("🔄 Loading board data for:", boardId)

      // Try to fetch board with all lists and cards
      const boardData = await boardApi.getBoard(boardId)
      console.log("✅ Board data loaded:", boardData)

      // Convert API data to component format
      const formattedColumns: ColumnType[] = (boardData.lists || []).map((list) => ({
        id: Number.parseInt(list.id),
        title: list.title,
        cards: (list.cards || []).map((card) => ({
          id: card.id,
          title: card.title,
          description: card.description,
          type: (card.type as CardType["type"]) || "goal",
          count: card.count,
        })),
      }))

      // Sort by position
      formattedColumns.sort((a, b) => {
        const aList = boardData.lists?.find((l) => Number.parseInt(l.id) === a.id)
        const bList = boardData.lists?.find((l) => Number.parseInt(l.id) === b.id)
        return (aList?.position || 0) - (bList?.position || 0)
      })

      setColumns(formattedColumns)
    } catch (err) {
      console.error("❌ Failed to load board data:", err)

      // Set mock data for testing if API fails
      console.log("🧪 Using mock data for testing...")
      setColumns([
        {
          id: 1,
          title: "To Do",
          cards: [
            { id: 1, title: "Task 1", description: "Description 1", type: "goal", count: 0 },
            { id: 2, title: "Task 2", description: "Description 2", type: "blocker", count: 1 },
          ],
        },
        {
          id: 2,
          title: "In Progress",
          cards: [{ id: 3, title: "Task 3", description: "Description 3", type: "discussion", count: 2 }],
        },
        {
          id: 3,
          title: "Done",
          cards: [],
        },
      ])
    } finally {
      setLoading(false)
    }
  }

  // Add column without authentication
  const handleAddColumn = async (title: string) => {
    if (addingColumn) return

    try {
      setAddingColumn(true)
      console.log("➕ Adding column:", title)

      const createData: CreateListDto = {
        title,
        boardId,
        position: columns.length,
      }

      const newListData = await listApi.createList(createData)
      console.log("✅ Column created:", newListData)

      const newColumn: ColumnType = {
        id: Number.parseInt(newListData.id),
        title: newListData.title,
        cards: [],
      }

      setColumns([...columns, newColumn])
      setShowAddColumn(false)
    } catch (error) {
      console.error("❌ Failed to add column:", error)

      // Add mock column for testing
      console.log("🧪 Adding mock column for testing...")
      const newColumn: ColumnType = {
        id: Date.now(), // Use timestamp as mock ID
        title,
        cards: [],
      }
      setColumns([...columns, newColumn])
      setShowAddColumn(false)
    } finally {
      setAddingColumn(false)
    }
  }

  // Update column without authentication
  const handleUpdateColumn = async (columnId: number, newTitle: string) => {
    try {
      console.log("✏️ Updating column:", columnId, newTitle)
      await listApi.updateList(columnId.toString(), { title: newTitle })
      setColumns((cols) => cols.map((col) => (col.id === columnId ? { ...col, title: newTitle } : col)))
    } catch (error) {
      console.error("❌ Failed to update column:", error)
      // Still update locally for testing
      setColumns((cols) => cols.map((col) => (col.id === columnId ? { ...col, title: newTitle } : col)))
    }
  }

  // Delete column without authentication
  const handleDeleteColumn = async (columnId: number) => {
    if (!confirm("Are you sure you want to delete this column?")) {
      return
    }

    try {
      console.log("🗑️ Deleting column:", columnId)
      await listApi.deleteList(columnId.toString())
      setColumns((cols) => cols.filter((col) => col.id !== columnId))
    } catch (error) {
      console.error("❌ Failed to delete column:", error)
      // Still delete locally for testing
      setColumns((cols) => cols.filter((col) => col.id !== columnId))
    }
  }

  // Copy column without authentication
  const handleCopyColumn = async (columnId: number) => {
    const columnToCopy = columns.find((col) => col.id === columnId)
    if (!columnToCopy) return

    try {
      console.log("📋 Copying column:", columnId)
      const createData: CreateListDto = {
        title: `${columnToCopy.title} (Copy)`,
        boardId,
        position: columns.length,
      }

      const newListData = await listApi.createList(createData)
      const newColumn: ColumnType = {
        id: Number.parseInt(newListData.id),
        title: newListData.title,
        cards: [],
      }

      setColumns([...columns, newColumn])
    } catch (error) {
      console.error("❌ Failed to copy column:", error)
      // Add mock copy for testing
      const newColumn: ColumnType = {
        id: Date.now(),
        title: `${columnToCopy.title} (Copy)`,
        cards: [],
      }
      setColumns([...columns, newColumn])
    }
  }

  // Add card without authentication
  const handleAddCard = async (columnId: number, title: string) => {
    try {
      const column = columns.find((col) => col.id === columnId)
      if (!column) return

      console.log("🃏 Adding card:", title, "to column:", columnId)

      const newCardData = await cardApi.createCard({
        title,
        columnId,
        description: "",
        type: "goal",
        count: 0,
        position: column.cards.length,
      })

      const newCard: CardType = {
        id: newCardData.id,
        title: newCardData.title,
        description: newCardData.description,
        type: newCardData.type as CardType["type"],
        count: newCardData.count,
      }

      setColumns((cols) => cols.map((col) => (col.id === columnId ? { ...col, cards: [...col.cards, newCard] } : col)))
    } catch (error) {
      console.error("❌ Failed to add card:", error)
      // Add mock card for testing
      const newCard: CardType = {
        id: Date.now(),
        title,
        description: "",
        type: "goal",
        count: 0,
      }
      setColumns((cols) => cols.map((col) => (col.id === columnId ? { ...col, cards: [...col.cards, newCard] } : col)))
    }
  }

  // Update card without authentication
  const handleUpdateCard = async (cardId: number, newTitle: string) => {
    try {
      console.log("✏️ Updating card:", cardId, newTitle)
      await cardApi.updateCard(cardId, { title: newTitle })
      setColumns((cols) =>
        cols.map((col) => ({
          ...col,
          cards: col.cards.map((card) => (card.id === cardId ? { ...card, title: newTitle } : card)),
        })),
      )
    } catch (error) {
      console.error("❌ Failed to update card:", error)
      // Still update locally for testing
      setColumns((cols) =>
        cols.map((col) => ({
          ...col,
          cards: col.cards.map((card) => (card.id === cardId ? { ...card, title: newTitle } : card)),
        })),
      )
    }
  }

  // Loading state
  if (loading) {
    return (
      <div className={styles.board}>
        <DebugPanel />
        <BoardToolbar />
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>Loading board data...</p>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.board}>
      <DebugPanel />
      <BoardToolbar />
      <div className={styles.columns}>
        {columns.map((col) => (
          <Column
            key={col.id}
            column={col}
            onCardClick={setSelectedCard}
            onAddCard={handleAddCard}
            onUpdateColumn={handleUpdateColumn}
            onDeleteColumn={handleDeleteColumn}
            onCopyColumn={handleCopyColumn}
            onUpdateCard={handleUpdateCard}
            data-id={col.id}
          />
        ))}
        {showAddColumn ? (
          <AddColumnForm onAdd={handleAddColumn} onCancel={() => setShowAddColumn(false)} loading={addingColumn} />
        ) : (
          <button className={styles.addColumnBtn} onClick={() => setShowAddColumn(true)}>
            <AiFillFileAdd className={styles.addColumnIcon} />
            Add new column
          </button>
        )}
      </div>
    </div>
  )
}

export default Board
