"use client"

import { useEffect } from "react"
import { useNavigate, useSearchParams } from "react-router-dom"
import { googleLogin, googleRegister } from "../../api/login.api"
import { exchangeGoogleCode } from "../../api/google-token-exchange.api.ts"

// ‚úÖ Google OAuth Callback - Ho√†n to√†n im l·∫∑ng, chuy·ªÉn h∆∞·ªõng ngay
export default function GoogleCallbackSilent() {
  const navigate = useNavigate()
  const [searchParams] = useSearchParams()

  useEffect(() => {
    const handleCallback = async () => {
      try {
        const code = searchParams.get("code")
        const state = searchParams.get("state")
        const error = searchParams.get("error")

        if (error || !code) {
          navigate("/login", { replace: true })
          return
        }

        const storedStateData = sessionStorage.getItem("google_oauth_state")
        if (!storedStateData) {
          navigate("/login", { replace: true })
          return
        }

        const { state: storedState, context } = JSON.parse(storedStateData)
        if (state !== storedState) {
          navigate("/login", { replace: true })
          return
        }

        const redirectUri = import.meta.env.VITE_GOOGLE_REDIRECT_URI || `${window.location.origin}/auth/google/callback`

        try {
          const { user, credential } = await exchangeGoogleCode({
            code,
            context,
            redirect_uri: redirectUri,
          })

          if (context === "signup") {
            await googleRegister(credential, user)
            navigate("/login", {
              state: { message: "ƒêƒÉng k√Ω Google th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p." },
            })
          } else {
            const loginData = await googleLogin(credential, user)

            localStorage.setItem("token", loginData.token)
            localStorage.setItem("username", loginData.username || user.name)
            localStorage.setItem("email", loginData.email || user.email)
            if (loginData.avatar || user.picture) {
              localStorage.setItem("avatar", loginData.avatar || user.picture)
            }

            // CHUY·ªÇN H∆Ø·ªöNG NGAY L·∫¨P T·ª®C
            window.location.href = "http://localhost:5173/"
          }
        } catch (apiError) {
          // ‚úÖ S·ª≠a ph·∫ßn Mock fallback ƒë·ªÉ s·ª≠ d·ª•ng th√¥ng tin t·ª´ Google
          // L·∫•y th√¥ng tin t·ª´ Google tr∆∞·ªõc khi fallback
          try {
            console.log("üîç API l·ªói, l·∫•y th√¥ng tin t·ª´ Google ƒë·ªÉ fallback")
            // L·∫•y l·∫°i th√¥ng tin t·ª´ Google ƒë·ªÉ c√≥ d·ªØ li·ªáu th·∫≠t
            const { user } = await exchangeGoogleCode({
              code,
              context,
              redirect_uri: redirectUri,
            })

            if (context !== "signup") {
              // S·ª≠ d·ª•ng th√¥ng tin th·∫≠t t·ª´ Google thay v√¨ d·ªØ li·ªáu c·ª©ng
              localStorage.setItem("token", "mock-jwt-token-" + Date.now())
              localStorage.setItem("username", user.name || "Google User")
              localStorage.setItem("email", user.email || "")
              localStorage.setItem("avatar", user.picture || "")

              console.log("‚úÖ ƒê√£ l∆∞u th√¥ng tin Google th·∫≠t trong mock mode:", {
                username: user.name,
                email: user.email,
                picture: user.picture,
              })

              window.location.href = "http://localhost:5173/"
            } else {
              navigate("/login", {
                state: { message: "ƒêƒÉng k√Ω Google th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p." },
              })
            }
          } catch (fallbackError) {
            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin t·ª´ Google, d√πng d·ªØ li·ªáu c·ª©ng nh∆∞ c≈©
            console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ Google, d√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh")
            if (context !== "signup") {
              localStorage.setItem("token", "mock-jwt-token-" + Date.now())
              localStorage.setItem("username", "Test User")
              localStorage.setItem("email", "user@example.com")
              localStorage.setItem("avatar", "https://ui-avatars.com/api/?name=Test+User&background=random")

              window.location.href = "http://localhost:5173/"
            } else {
              navigate("/login", {
                state: { message: "ƒêƒÉng k√Ω Google th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p." },
              })
            }
          }
        }

        sessionStorage.removeItem("google_oauth_state")
      } catch (error) {
        navigate("/login", { replace: true })
      }
    }

    handleCallback()
  }, [searchParams, navigate])

  // KH√îNG HI·ªÇN TH·ªä G√å C·∫¢ - ch·ªâ m·ªôt m√†n h√¨nh tr·ªëng
  return (
    <div
      style={{
        minHeight: "100vh",
        background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
      }}
    />
  )
}
